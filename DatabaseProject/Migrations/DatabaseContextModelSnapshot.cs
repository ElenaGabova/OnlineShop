// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.DanceDirectionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MainPhoto")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPhotos")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SoloDoubleSign")
                        .HasColumnType("bit");

                    b.Property<string>("VideoLinks")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DanceDirections");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "          Бача́та (исп. bachata) — танец родом из Доминиканской Республики, получивший также широкое распространение в латиноамериканских странах Карибского бассейна.",
                            MainPhoto = "images/danceDirections/83dfe940-8e63-4138-b4f8-d885009b1ee0.png",
                            Name = "Бачата",
                            SoloDoubleSign = true
                        },
                        new
                        {
                            Id = 2,
                            Description = "Сальса — современный социальный танец из США и Латинской Америки, который танцуют парно или в группах. Танец возник в 1970-х годах в Нью-Йорке\r\n\r\nС незначительной поправкой на различные стили сальсы, основные движения состоят из быстрого-быстрого-медленного шагов под четыре ударных ритма (счета, бита) в музыке. Каждый четвёртый счёт используется для медленного переноса веса, паузы или, в некоторых стилях, для кика (выброса ноги) или чечётки (удара ногой о пол). Ряд стилей имеет чёткое определение начала танца. Лос-Анджелес, Лондон — начинаются на счёт «1» — сильную долю. Нью-Йорк (= Modern Mambo = Eddie Torres style = On 2), Пуэрто-Рико, Палладиум и кубинский сон — начинаются на счёт «2».\r\n\r\nОстальные виды (кубинский, колумбийский, венесуэльский) могут начинаться на любую долю музыки. В некоторых регионах правильной считается сильная доля, в некоторых — tiempo, в некоторых — contratiempo, в каких-то — вообще не закреплено.\r\n\r\nВенесуэльский и колумбийский стили также отличаются тем, что в силу специфики ряда элементов в танце может происходить смещение ритма. То есть в течение 1 танца может присутствовать начало движений на «1», и на «2», и на другие счета. Такое происходит после определённых фигур, которые могут менять ритмику танца.\r\n\r\nТанец в кубинском стиле не может начинаться на любой счёт, а только на a tiempo y contratiempo, то есть на первую или вторую доли.",
                            MainPhoto = "images/danceDirections/75950549-20ad-43a6-b242-dd71d60ebfa0.png",
                            Name = "Сальса",
                            SoloDoubleSign = true
                        },
                        new
                        {
                            Id = 3,
                            Description = "Пила́тес (англ. Pilates) — система физических упражнений (фитнеса), разработанная Йозефом Пилатесом в начале XX века для реабилитации после травм.\r\n\r\nАвтор назвал свою систему контрологией (англ. сontrology), определив её как полную координацию между телом, умом и духом, но в настоящее время она широко известна как «метод Пилатеса» или просто «Пилатес»[1].\r\n\r\nПилатес представляет собой серию упражнений в медленном темпе. Как и у других видов фитнеса или физкультуры, результатом регулярных занятий становятся оздоровление суставов и укрепление мышц, снятие напряжений и болей в теле, коррекция веса, улучшение осанки, нормализация сна, улучшение самочувствия.\r\n\r\nЭнтузиасты пилатеса утверждают, что им можно заниматься как в фитнес-клубе, так и самостоятельно, что он доступен людям любого возраста и пола, с любым уровнем физической подготовки, и что возможность травм сведена к минимуму. Специалисты по фитнесу предупреждают, что начинать занятия необходимо под контролем тренера на специальных тренажёрах, позволяющих избежать травм, а самостоятельные занятия на матах допускаются только для овладевших «продвинутым» (третьим) уровнем подготовки[",
                            MainPhoto = "images/danceDirections/50367a3c-8265-40fa-8318-617ef09b5613.png",
                            Name = "Пилатес",
                            SoloDoubleSign = false
                        },
                        new
                        {
                            Id = 4,
                            Description = "Соло-блюз — удивительный танец, позволяющий выразить себя, свой стиль, свои чувства вместе с блюзовой музыкой. Это будто бы еще один способ проявить любовь к блюзу!\r\n\r\nТанец блюз пластичен, разнообразен и основан на импровизации. Это свобода движения и самовыражения, находящая выход через тело. Это может быть иногда нежность, гибкость и пластика, а иногда резкость или заземленность. Блюз — это смешение всего того, что вы уже умеете, с тем, чего именно хочется вашему телу в данный момент. А еще вы можете танцевать его где угодно, и даже взаимодействовать вашим танцем с музыкантами.\r\n\r\nЕсли вам нравится блюзовая музыка, те эмоции и атмосфера, которые она создает, то соло-блюз подходит вам, независимо от возраста, пола и степени танцевальной подготовки. Блюз могут танцевать все!",
                            MainPhoto = "images/danceDirections/b2c7756f-dc29-4729-b973-795cf4fa9057.png",
                            Name = "Соло-Блюз",
                            SoloDoubleSign = false
                        });
                });

            modelBuilder.Entity("Entities.DanceDirectionRegistrationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("DanceDirectionEntityId")
                        .HasColumnType("int");

                    b.Property<Guid>("DanceDirectionUserEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("NeedToCall")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DanceDirectionEntityId");

                    b.HasIndex("DanceDirectionUserEntityId");

                    b.ToTable("DanceDirectionRegistrations");
                });

            modelBuilder.Entity("Entities.DanceDirectionUserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DanceDirectionUsers");
                });

            modelBuilder.Entity("Entities.FavoriteProductEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FavoriteProducts");
                });

            modelBuilder.Entity("Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Сost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("Entities.StorageItemEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("OrderEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<Guid>("StorageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OrderEntityId");

                    b.HasIndex("ProductId");

                    b.HasIndex("StorageId");

                    b.ToTable("StorageItems");
                });

            modelBuilder.Entity("Entities.TextPageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AboutUsFooter")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AboutUsText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectionsLeft")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DirectionsRight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FooterText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderMainText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeaderText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimetableLeft")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimetableRight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TextPages");
                });

            modelBuilder.Entity("Entities.UserDeliveryInfoEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StorageId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("UserDeliveryInfos");
                });

            modelBuilder.Entity("Entities.DanceDirectionRegistrationEntity", b =>
                {
                    b.HasOne("Entities.DanceDirectionEntity", "DanceDirectionEntity")
                        .WithMany()
                        .HasForeignKey("DanceDirectionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.DanceDirectionUserEntity", "DanceDirectionUserEntity")
                        .WithMany()
                        .HasForeignKey("DanceDirectionUserEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DanceDirectionEntity");

                    b.Navigation("DanceDirectionUserEntity");
                });

            modelBuilder.Entity("Entities.FavoriteProductEntity", b =>
                {
                    b.HasOne("Entities.ProductEntity", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Entities.OrderEntity", b =>
                {
                    b.HasOne("Entities.UserDeliveryInfoEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.StorageItemEntity", b =>
                {
                    b.HasOne("Entities.OrderEntity", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderEntityId");

                    b.HasOne("Entities.ProductEntity", "Product")
                        .WithMany("StorageItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.StorageEntity", "Storage")
                        .WithMany("Items")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Entities.UserDeliveryInfoEntity", b =>
                {
                    b.HasOne("Entities.StorageEntity", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageId");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Entities.OrderEntity", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Entities.ProductEntity", b =>
                {
                    b.Navigation("StorageItems");
                });

            modelBuilder.Entity("Entities.StorageEntity", b =>
                {
                    b.Navigation("Items");
                });
#pragma warning restore 612, 618
        }
    }
}
